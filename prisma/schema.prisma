// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  emailVerified DateTime?
  image     String?
  firstName String?
  lastName  String?
  name      String?
  bio       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Recipe Recipe[]

  Circle Circle[]

  Account Account[]

  Session Session[]
}

model UserRecipePreferences {
  userId    String   @id
  veganOnly Boolean
  vegetarianOnly Boolean
  enableSuggestions Boolean
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserAllergy {
  id        String   @id @default(cuid())
  userId    String
  allergyId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserIngredient {
  id           String   @id @default(cuid())
  userId       String
  name         String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  RecipeIngredient RecipeIngredient[]
}

model Ingredient {
  id        String   @id @default(cuid())
  name      String
  vegan     Boolean
  vegetarian Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  RecipeIngredient RecipeIngredient[]

  IngredientConversion IngredientConversion[]
}

model MeasurementUnit {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model IngredientConversion {
  id              String   @id @default(cuid())
  ingredientId    String
  fromUnitId      String
  toUnitId        String
  conversionRatio Float
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  Ingredient Ingredient[]
}

model RecipeIngredient {
  id           String     @id @default(cuid())
  recipeId     String
  recipe       Recipe     @relation(fields: [recipeId], references: [id])
  ingredientId String?
  ingredient   Ingredient? @relation(fields: [ingredientId], references: [id])
  userIngredientId String?
  userIngredient   UserIngredient? @relation(fields: [userIngredientId], references: [id])
  amount       String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Recipe {
  id        String   @id @default(cuid())
  title     String
  description String @default("")
  content   String @default("")
  thumbnailUrl String?
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  visibility Visibility
  cookTime  Int
  prepTime  Int
  servings  Int
  calories  Int
  vegan     Boolean
  vegetarian Boolean
  verifiedIngredients Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  shouldPublish Boolean @default(false)
  publishAt DateTime?

  recipeIngredients RecipeIngredient[]
}

model UserRecipeNote {
  userId    String
  recipeId  String
  note      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, recipeId], name: "userId_recipeId")
}

model UserRecipeRating {
  id        String   @id @default(cuid())
  userId    String
  recipeId  String
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserRecipeFavorite {
  id        String   @id @default(cuid())
  userId    String
  recipeId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserRecipeComment {
  id        String   @id @default(cuid())
  userId    String
  recipeId  String
  comment   String
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserRecipeCommentRating {
  id        String   @id @default(cuid())
  userId    String
  commentId String
  liked     Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserBlacklistedIngredient {
  id           String   @id @default(cuid())
  userId       String
  ingredientId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Circle {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  CircleOwner User @relation(fields: [CircleOwnerid], references: [id])
  CircleOwnerid String
}

model CircleMember {
  id        String   @id @default(cuid())
  circleId  String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CircleRecipe {
  id        String   @id @default(cuid())
  circleId  String
  recipeId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CircleInvite {
  id        String   @id @default(cuid())
  circleId  String
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Visibility {
  PUBLIC
  PRIVATE
  UNLISTED
}